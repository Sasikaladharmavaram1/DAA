
#include <stdio.h>

#define MOD 1000000007  // Modulo for handling large calculations

int dp[51][51][51];  // Dynamic programming table (size adjusted)

int countPaths(int m, int n, int N, int i, int j) {
    // Base cases:
    if (i < 0 || i >= m || j < 0 || j >= n) {
        return 1;  // Out of boundary counts as a successful path
    }
    if (N == 0) {
        return 0;  // No more steps, not out of boundary
    }

    // Check for pre-computed value to avoid redundant calculations
    if (dp[i][j][N] != -1) {
        return dp[i][j][N];
    }

    // Recursive calls to explore all valid moves
    int up = countPaths(m, n, N - 1, i - 1, j);
    int down = countPaths(m, n, N - 1, i + 1, j);
    int left = countPaths(m, n, N - 1, i, j - 1);
    int right = countPaths(m, n, N - 1, i, j + 1);

    // Store the result in the table for future use
    dp[i][j][N] = (up + down + left + right) % MOD;
    return dp[i][j][N];
}

int main() {
    int m, n, N, i, j;

    scanf("%d %d %d %d %d", &m, &n, &N, &i, &j);

    // Initialize the DP table with -1 for unknown values
    for (int k = 0; k <= N; k++) {
        for (int a = 0; a < m; a++) {
            for (int b = 0; b < n; b++) {
                dp[a][b][k] = -1;
            }
        }
    }

    int result = countPaths(m, n, N, i, j);
    printf("%d\n", result);

    return 0;
}
